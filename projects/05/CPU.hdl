// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 *
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	// DMux16(in = instruction,sel = instruction[15],a = tmp15_0,b = tmp15_1);
	// DMux16(in = tmp15_1,sel = tmp15_1[12],a = tmp12_0,b = tmp12_1);
	
	// tmp1[12] = a ; tmp[6..11] = cccccc ; tmp[3..5] = ddd ; tmp[0..2] = jjj 	
	
	Mux16(a = instruction,b = tt4,sel = instruction[15],out = tt1);
	Not(in =instruction[15],out = notmp1);
	And(a = instruction[15],b = instruction[5],out = tmp1);
	Or(a = tmp1,b = notmp1,out = tmp2);
	Register(in = tt1,load = tmp2,out = tt2,out[0..14] = addressM);
	Mux16(a = tt2,b = inM,sel = instruction[12],out = tt3);
	And(a = instruction[4],b = instruction[15],out = tmp11);
	DRegister(in = tt4,load = tmp11,out = tt5);
	ALU(x = tt5,y = tt3,zx = instruction[11],nx = instruction[10],zy = instruction[9],ny = instruction[8],f = instruction[7],no = instruction[6],out = tt4,out = outM,zr = tmp3,ng = tmp4);
	And(a = instruction[15],b = instruction[3],out = writeM);
	
	Or(a = tmp3,b = tmp4, out = tmp5);
	Not(in = tmp5,out = tmp6);
	And(a = tmp4,b = instruction[2],out = tmp7);
	And(a = tmp3,b = instruction[1],out = tmp8);
	And(a = tmp6,b = instruction[0],out = tmp9);
	Or8Way(in[0] = tmp7,in[1] = tmp8,in[2] = tmp9,in[3..7] = false,out = tmp10);
	And(a = tmp10,b = instruction[15],out = tmp12);
	PC(in = tt2, reset = reset, load = tmp12, inc = true,out[0..14] = pc);
}