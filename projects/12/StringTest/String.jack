// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array now;
	field int length;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if(maxLength = 0){
			let now = Array.new(1);
			let length = 0;
			return this;		
		}
		else{
			let now = Array.new(maxLength);
			let length = 0;
			return this;
		}
    }

    /** Disposes this string. */
    method void dispose() {
		do now.dispose();
		return ;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return now[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let now[j] = c;
		return ;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		let now[length] = c;
		let length = length + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let length = length - 1;
		return ;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int i,tmp,rsl;
		var boolean flag,pos;
		let flag = false;
		let i = 0;
		let rsl = 0;
		if(now[0] = 45){
			let pos = false;
			let i = i + 1;
		}
		else{
			let pos = true;
		}
		while((~flag) & (i < length)){
			if((now[i] < 48) & (now[i] > 57)){
				let flag = true;
			}
			else{
				let rsl = rsl * 10;
				let rsl = rsl + (now[i]-48);
			}
			let i = i + 1;
		}
		if(pos){
			return rsl;
		}
		else{
			return (-rsl);
		}
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int i,j,tmp,rsl;
		var Array su;
		var boolean flag,pos;
		let flag = false;
		let su = Array.new(5);
		let i = 0;
		let j = 0;
		if(val < 0){
			let now[0] = 45;
			let i = i + 1;
			let val = Math.abs(val);
		}
		while(~(val = 0)){
			let su[j] = (val - ((val/10)*10));
			let val = val / 10;
			let j = j + 1;
		}
		let j = j - 1;
		while(j > (-1)){
			let now[i] = (su[j] + 48);
			let i = i + 1;
			let j = j - 1;
		}
		let length = i;
		return ;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
